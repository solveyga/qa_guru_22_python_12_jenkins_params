{"name": "test_registration_form_with_all_fields", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', \"label[for='hobbies-checkbox-2']\")).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-2\" class=\"custom-control-label\">...</label> is not clickable at point (609, 563). Other element would receive the click: <td></td>\n  (Session info: chrome=141.0.7390.66); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nScreenshot: file:///Users/s.azbite/.selene/screenshots/1760280164149/1760280164149.png\nPageSource: file:///Users/s.azbite/.selene/screenshots/1760280164149/1760280164149.html", "trace": "fn = <selene.core.wait.Command object at 0x106de9c90>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n                       ^^^^^^^^^^^^^^^\n\nvenv/lib/python3.11/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv/lib/python3.11/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n           ^^^^^^^^^^^^^^^^\nvenv/lib/python3.11/site-packages/selene/core/entity.py:525: in raw_click\n    element.locate().click()\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106e057d0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...000193aafbc8 _pthread_start + 136\\\\n20  libsystem_pthread.dylib             0x0000000193aaab80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-2\" class=\"custom-control-label\">...</label> is not clickable at point (609, 563). Other element would receive the click: <td></td>\nE         (Session info: chrome=141.0.7390.66); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104f835f0 cxxbridge1$str$ptr + 2894960\nE       1   chromedriver                        0x0000000104f7b52c cxxbridge1$str$ptr + 2861996\nE       2   chromedriver                        0x0000000104aa15ec _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 74324\nE       3   chromedriver                        0x0000000104aeeb0c _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 391028\nE       4   chromedriver                        0x0000000104aed074 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 384220\nE       5   chromedriver                        0x0000000104aeae84 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 375532\nE       6   chromedriver                        0x0000000104aea27c _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 372452\nE       7   chromedriver                        0x0000000104adecc0 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 325928\nE       8   chromedriver                        0x0000000104ade74c _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 324532\nE       9   chromedriver                        0x0000000104b2a458 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 635072\nE       10  chromedriver                        0x0000000104add178 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 318944\nE       11  chromedriver                        0x0000000104f4733c cxxbridge1$str$ptr + 2648508\nE       12  chromedriver                        0x0000000104f4a918 cxxbridge1$str$ptr + 2662296\nE       13  chromedriver                        0x0000000104f27dbc cxxbridge1$str$ptr + 2520124\nE       14  chromedriver                        0x0000000104f4b200 cxxbridge1$str$ptr + 2664576\nE       15  chromedriver                        0x0000000104f1952c cxxbridge1$str$ptr + 2460588\nE       16  chromedriver                        0x0000000104f6abec cxxbridge1$str$ptr + 2794092\nE       17  chromedriver                        0x0000000104f6ad70 cxxbridge1$str$ptr + 2794480\nE       18  chromedriver                        0x0000000104f7b178 cxxbridge1$str$ptr + 2861048\nE       19  libsystem_pthread.dylib             0x0000000193aafbc8 _pthread_start + 136\nE       20  libsystem_pthread.dylib             0x0000000193aaab80 thread_start + 8\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_registration_form_with_all_fields():\n    \n       user = User()\n       registration_page = RegistrationPage()\n    \n       registration_page.open()\n>      registration_page.register(user)\n\ntests/test_registration_form.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/registration_page.py:74: in register\n    self.fill_hobbies(*user.hobbies)\npages/registration_page.py:48: in fill_hobbies\n    browser.element(self.HOBBIES_MAP[hobby]).click()\nvenv/lib/python3.11/site-packages/selene/core/entity.py:540: in click\n    self.wait.for_(\nvenv/lib/python3.11/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x106de9c90>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', \"label[for='hobbies-checkbox-2']\")).click\nE                   \nE                   Reason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-2\" class=\"custom-control-label\">...</label> is not clickable at point (609, 563). Other element would receive the click: <td></td>\nE                     (Session info: chrome=141.0.7390.66); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE                   Screenshot: file:///Users/s.azbite/.selene/screenshots/1760280164149/1760280164149.png\nE                   PageSource: file:///Users/s.azbite/.selene/screenshots/1760280164149/1760280164149.html\n\nvenv/lib/python3.11/site-packages/selene/core/wait.py:148: TimeoutException"}, "start": 1760280164166, "stop": 1760280170932, "uuid": "4859b5b9-9cb4-4c7b-8b7e-87a32902345c", "historyId": "d35944838041e798f11851175fac81ef", "testCaseId": "d35944838041e798f11851175fac81ef", "fullName": "tests.test_registration_form#test_registration_form_with_all_fields", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "w-adms-MacBook-Pro.local"}, {"name": "thread", "value": "7492-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration_form"}], "titlePath": ["tests", "test_registration_form.py"]}